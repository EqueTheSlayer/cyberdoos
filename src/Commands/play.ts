import {SlashCommandBuilder} from 'discord.js';
import {ClientModel} from "../models/client.model";
import {repeatType} from "../models/play.model";
import {stop, status, repeat, next, row, row2} from "../components/buttons";

module.exports = {
    data: new SlashCommandBuilder()
        .setName('music')
        .setDescription('–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π —á–∏–ª–∏–ø–∏–∑–¥—Ä–∏–∫')
        .addSubcommand(subcommand =>
            subcommand
                .setName('play')
                .setDescription('–í–∫–ª—é—á–∞–µ—Ç –ø–µ—Å–Ω—é')
                .addStringOption(option =>
                    option.setName('input')
                        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–µ (youtube)')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('stop')
                .setDescription('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Å–Ω—é'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('next')
                .setDescription('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—é –≤ –æ—á–µ—Ä–µ–¥–∏'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('repeat')
                .setDescription('–ü–æ–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏')
                .addStringOption(option =>
                    option.setName('repeat')
                        .setDescription('0 - –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä, 1 - –≤–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏, 2 - –≤–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('status')
                .setDescription('–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ')),
    async execute(interaction, client: ClientModel) {
        const {options, member, channel} = interaction;
        const subCommand = options.getSubcommand();
        const voiceChannel = member?.voice.channel;
        const queue = await client.distube.getQueue(voiceChannel);

        try {
            switch (subCommand) {
                case 'play':
                    await interaction.deferReply({ ephemeral: true });
                    await client.distube.play(voiceChannel, options.getString("input"), {
                        textChannel: channel,
                        member: member,
                        position: -1,
                    }).catch(err => {
                        console.log(err)
                    });
                    await interaction.editReply({content: '–ù–∞—à–µ–ª, –≤—Ä—É–±–∞—é', components: [row, row2]});
                    break;
                case 'stop':
                    await interaction.deferReply({ ephemeral: true });
                    await queue?.stop();
                    await interaction.editReply({content: '–¢–æ—Ä–º–æ–∂—É –º—É–∑–ª–æ'});
                    break;
                case 'repeat':
                    await interaction.deferReply({ ephemeral: true });
                    await queue?.setRepeatMode(Number(options.getString('repeat')));
                    repeat.setEmoji(queue.repeatMode === 2 ? 'üîÇ' : 'üîÅ')
                    await interaction.editReply({
                        content: repeatType[queue.repeatMode],
                        components: [row, row2]
                    });
                    break;
                case 'next':
                    await interaction.deferReply({ ephemeral: true });
                    await queue?.skip();
                    await interaction.editReply({content: '–í–∫–ª—é—á–∞—é —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—é', components: [row, row2]});
                    break;
                case 'status':
                    await interaction.reply({content: `–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: ${queue.songs[0].name}. ${repeatType[queue.repeatMode]}`, ephemeral: true, components: [row, row2]});
            }
        } catch (e) {
            console.log(e)
            
            return await interaction.channel.send({content: e, ephemeral: true});
        }
    },
};