const Discord = require('discord.js');
const bot = new Discord.Client();
const request = require('request');
const config = require('./botconfig.json');
const token = config.token;
const prefix = config.prefix;
const apiKey = '9552deb6aed115532d3abdc34e24d985';
const city = 'volgograd';
const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=RU&appid=${apiKey}`;
const express = require("express");
const path = require('path');
const PORT = process.env.PORT || 5016;
const ytdl = require('ytdl-core');
const queue = new Map();
const search = require('youtube-search');
const opts = {
    maxResults: 1,
    key: config.YOUTUBE_API,
    type: 'video',
    order: 'relevance'
}

let http = require("http");
setInterval(function () {
    http.get('http://cyberdoos.herokuapp.com');
}, 300000);

express()
    .use(express.static(path.join(__dirname, 'public')))
    .set('views', path.join(__dirname, 'views'))
    .set('view engine', 'ejs')
    .get('/', (req, res) => res.render('pages/index'))
    .listen(PORT, () => console.log(`Listening on ${PORT}`))

//—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–æ—Ç–∞
bot.on('ready', () => {
    console.log(`–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç ${bot.user.username}`);
    bot.generateInvite(["ADMINISTRATOR"]).then(link => {
    });
    bot.user.setActivity('ü§ñ–∫–∏–±–µ—Ä–∂–∏–∑–Ω—åü§ñ')
});

bot.on('message', async msg => {
    //—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if ((msg.author.id === '281120774289489922' || msg.author.id === '274614692385652737') && msg.content.includes(`${prefix}`)) {
        msg.reply('\`\`\`ü§ñü§ñü§ñ–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–∞–≤—É —Ç—ã —á—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å –º–Ω–µ‚ùì‚ùì‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—É—á–∏—Å—å —Å–µ–±—è –≤–µ—Å—Ç–∏, ü§°ü§°ü§°\`\`\`');
    } else {
        //!help —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        if (msg.content.startsWith(`${prefix}help`)) {
            msg.reply({
                embed: {
                    color: 15105570,
                    description: `–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π: \n !play (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞)‚ñ∂Ô∏è\n !skip (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å)‚èπÔ∏è\n !stop‚èØÔ∏è \n !flip (–ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É)üí´ \n !–ø–æ–≥–æ–¥–∞ (—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ)üåû\n !–≤–∏—Ä—É—Å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§)üíä`
                }
            })
        }
        // —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if (msg.content.startsWith(`${prefix}`)) {
            msg.delete({ timeout: 300000 });
        }
        if (msg.author.bot === true) {
            msg.delete({ timeout: 300000 });
        }
        if (msg.content.startsWith(`/play`)) {
            msg.channel.send(`\`\`\`–ê –∫–∞–∫ –∂–µ —è?üò•üò•üò•\`\`\``)
        }
        //—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        if (msg.content.startsWith('!roll') && msg.author.bot === false) {
            let args2 = msg.content.split(' ');
            console.log(typeof Number(args2[1]));
            if (typeof Number(args2[1]) == 'number') { 
                function getRandomInRange(max) {
                    return msg.reply({
                        embed: {
                            color: 15105570,
                            description: `–í–∞—à–µ —á–∏—Å–ª–æ ${Math.floor(Math.random() * (max + 1))}`
                        }
                    });
                }
                getRandomInRange(Number(args2[1]));
            } else {
                msg.reply({
                    embed: {
                        color: 15105570,
                        description: `–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —á–∏—Å–ª–∞, ü§°`
                    }
                })
            }
        }
        //–ø–æ–¥–±—Ä–æ—Å –º–æ–Ω–µ—Ç–∫–∏
        if (msg.content.startsWith(`${prefix}flip`)) {
            const coins = ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'];
            let flip = coins[Math.floor(Math.random() * 2)];
            if (flip === '–æ—Ä–µ–ª') {
                msg.reply({
                    embed: {
                        color: 15105570,
                        description: `–í—ã–ø–∞–ª –æ—Ä—ë–ª`
                    }
                });
            } else {
                msg.reply({
                    embed: {
                        color: 15105570,
                        description: `–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞`
                    }
                });
            }
        }
        //–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        const serverQueue = queue.get(msg.guild.id);

        if (msg.content.startsWith(`${prefix}play`)) {
            execute(msg, serverQueue);
            return;
        } else if (msg.content.startsWith(`${prefix}skip`)) {
            skip(msg, serverQueue);
            return;
        } else if (msg.content.startsWith(`${prefix}stop`)) {
            stop(msg, serverQueue);
            return;
        }
        //–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å
        if (msg.content.search(`${prefix}[–í–≤B][–ò–∏][–†—ÄPp][–£—ÉYy][Cc–°—Å]`) > -1 && msg.author.bot === false) {
            request("https://pomber.github.io/covid19/timeseries.json", function (err, response, body) {
                if (err) {
                    console.log('covid –æ—à–∏–±–∫–∞')
                } else {
                    let covidData = JSON.parse(body);
                    let lastday = covidData.Russia[covidData.Russia.length - 1];
                    msg.channel.send(`\`\`\`–ù–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –æ–∫—Ä—É–≥–µ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω üíä${lastday.confirmed}üíä —Å–ª—É—á–∞–µ–≤ –∑–∞—Ä–∞–∂–µ–Ω–∏—è COVID-19, –ø–æ–≥–∏–±–ª–æ üíÄ${lastday.deaths}üíÄ —á–µ–ª–æ–≤–µ–∫. –í–∞–Ω—É—Å –≤—Å–µ –µ—â–µ –∂–∏–≤ü§¨üò≠ü§¨üò≠ü§¨\`\`\``)
                }
            })
        }
        //–ø–æ–≥–æ–¥–∞
        if (msg.content.search(`${prefix}[–ü–ø][–û–æOo][–ì–≥][[–û–æOo][–î–¥][–ê–∞Aa]`) > -1 && msg.author.bot === false) {
            request(url, function (err, response, body) {
                if (err) {
                    console.log('–æ—à–∏–±–∫–∞');
                } else {
                    let data = JSON.parse(body);
                    console.log(data);
                    let data2 = data.weather.find(item => item.id);
                    let temp = Math.floor(data.main.temp);
                    if (data2.description == '—è—Å–Ω–æ') {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÄÔ∏è${data2.description}‚òÄÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–æ–±–ª–∞')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚õÖ${data2.description}‚õÖ\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–¥–æ–∂–¥—å')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ üåßÔ∏è${data2.description}üåßÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–ø–∞—Å–º—É')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÅÔ∏è${data2.description}‚òÅÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                }
            });
        }

        console.log(msg.author.username + ' (' + msg.author.id + ') ' + ': ' + msg.content);
        async function execute(msg, serverQueue) {
            let args = msg.content.split(' ');
            let query = args.shift();
            let query2 = args.join(' ');
            let query3 = [query2];
            console.log(query3)
            let result = await search(query3, opts);
            console.log(result)
            let songLink = result.results.find(item => item.link);
            let songLink2 = songLink.link;
            const voiceChannel = msg.member.voice.channel;
            if (!voiceChannel) return msg.channel.send({
                embed: {
                    color: 15105570,
                    description: '–ß—Ç–æ–±—ã —è —Å–ø–µ–ª –¥–ª—è —Ç–µ–±—è, –∑–∞–π–¥–∏ –Ω–∞ –ª—é–±–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, ü§°'
                }
            });
            const songInfo = await ytdl.getInfo(songLink2);
            const song = {
                title: songInfo.title,
                url: songInfo.video_url,
            };

            if (serverQueue == undefined) {
                const queueContruct = {
                    textChannel: msg.channel,
                    voiceChannel: voiceChannel,
                    connection: null,
                    songs: [],
                    volume: 5,
                    playing: true
                };

                queue.set(msg.guild.id, queueContruct);
                queueContruct.songs.push(song);

                try {
                    let connection = await voiceChannel.join();
                    queueContruct.connection = connection;
                    play(msg.guild, queueContruct.songs[0]);
                } catch (err) {
                    console.log(err);
                    queue.delete(msg.guild.id);
                    return msg.channel.send(err);
                }
            } else {
                serverQueue.songs.push(song);
                console.log(serverQueue.songs);
                return msg.channel.send({
                    embed: {
                        color: 15105570,
                        description: `ü§ñ–î–æ–±–∞–≤–∏–ª üé§${song.title}üé§ –≤ –æ—á–µ—Ä–µ–¥—å ü§ñ`
                    }
                });
            }

        }
        function play(guild, song) {
            let serverQueue = queue.get(guild.id);

            if (song == undefined) {
                setTimeout(() => {
                    serverQueue.voiceChannel.leave();
                }, 300000);
                queue.delete(guild.id);
            }
            serverQueue.dispatcher = serverQueue.connection.play(ytdl(song.url, { filter: "audioonly" }))
            serverQueue.dispatcher.on('speaking', (value) => {
                if (!value) {
                    serverQueue.songs.shift();
                    play(guild, serverQueue.songs[0]);
                }
            })
            msg.channel.send({
                embed: {
                    color: 15105570,
                    description: `–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É üé§üé§üé§ ${song.title} üé§üé§üé§`
                }
            })
            serverQueue.dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
        }

        function skip(msg, serverQueue) {
            if (Object.keys(serverQueue).length == 0) {
                return msg.channel.send({
                    embed: {
                        color: 15105570,
                        description: '–í–∫–ª—é—á–∏ —Ö–æ—Ç—å –æ–¥–Ω—É –ø–µ—Å–Ω—é, ü§°'
                    }
                })
            };
            if (!msg.member.voice.channel) {
                return msg.channel.send({
                    embed: {
                        color: 15105570,
                        description: '–ê —è –∏ –Ω–µ –¥–ª—è —Ç–µ–±—è –ø–æ—é, ü§°'
                    }
                })
            };
            serverQueue.dispatcher.pause();
            msg.channel.send({
                embed: {
                    color: 15105570,
                    description: 'ü§ñ–í–∫–ª—é—á–∞—é —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—éü§ñ'
                }
            })
        }

        function stop(msg, serverQueue) {
            if (!msg.member.voice.channel) {
                return msg.channel.send({
                    embed: {
                        color: 15105570,
                        description: '–ê —è –∏ –Ω–µ –¥–ª—è —Ç–µ–±—è –ø–æ—é, ü§°'
                    }
                })
            };
            serverQueue.songs = [];
            msg.channel.send({
                embed: {
                    color: 15105570,
                    description: `‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è–í–∞—à–∞ –ø–µ—Å–µ–Ω–∫–∞ —Å–ø–µ—Ç–∞, –æ—Ç–∫–ª—é—á–∞—é—Å—å...‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è`
                }
            })
            serverQueue.dispatcher.pause();
        }
    }
});
bot.login(token);