const Discord = require('discord.js');
const bot = new Discord.Client();
const request = require('request');
const config = require('./botconfig.json');
const token = config.token;
const prefix = config.prefix;
const apiKey = '9552deb6aed115532d3abdc34e24d985';
const city = 'volgograd';
const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=RU&appid=${apiKey}`;
const express = require("express");
const path = require('path');
const PORT = process.env.PORT || 5016;
const ytdl = require('ytdl-core');
const queue = new Map();


let http = require("http");
setInterval(function () {
    http.get("http://cyberdoos.herokuapp.com");
}, 300000);

express()
    .use(express.static(path.join(__dirname, 'public')))
    .set('views', path.join(__dirname, 'views'))
    .set('view engine', 'ejs')
    .get('/', (req, res) => res.render('pages/index'))
    .listen(PORT, () => console.log(`Listening on ${PORT}`))

//—Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
bot.on('ready', () => {
    console.log(`–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç ${bot.user.username}`);
    bot.generateInvite(["ADMINISTRATOR"]).then(link => {
    });
});

bot.on('message', async msg => {
    if ((msg.author.id === '281120774289489922' || msg.author.id === '274614692385652737') && msg.content.includes(`${prefix}`)) {
        msg.reply('\`\`\`ü§ñü§ñü§ñ–¢—ã –∫—Ç–æ –Ω–∞—Ö—É–π —Ç–∞–∫–æ–π —à–æ–±—ã –º–Ω–µ –ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å‚ùì‚ùì‚ùì –û—Ç—Å–æ—Å–∏ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –∫–∞–º–Ω–µ–π –∏–∑ —Ä–∞—Å—Ç–∞, ü§°ü§°ü§°\`\`\`');
    } else {
        //–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        const serverQueue = queue.get(msg.guild.id);

        if (msg.content.startsWith(`${prefix}play`)) {
            execute(msg, serverQueue);
            return;
        } else if (msg.content.startsWith(`${prefix}skip`)) {
            skip(msg, serverQueue);
            return;
        } else if (msg.content.startsWith(`${prefix}stop`)) {
            stop(msg, serverQueue);
            return;
        }
        //–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å
        if (msg.content.search(`${prefix}[–í–≤B][–ò–∏][–†—ÄPp][–£—ÉYy][Cc–°—Å]`) > -1 && msg.author.bot === false) {
            request("https://pomber.github.io/covid19/timeseries.json", function (err, response, body) {
                if (err) {
                    console.log('covid –æ—à–∏–±–∫–∞')
                } else {
                    let covidData = JSON.parse(body);
                    let lastday = covidData.Russia[covidData.Russia.length - 1];
                    msg.channel.send(`\`\`\`–ù–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –æ–∫—Ä—É–≥–µ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω üíä${lastday.confirmed}üíä —Å–ª—É—á–∞–µ–≤ –∑–∞—Ä–∞–∂–µ–Ω–∏—è COVID-19, –ø–æ–≥–∏–±–ª–æ üíÄ${lastday.deaths}üíÄ —á–µ–ª–æ–≤–µ–∫. –í–∞–Ω—É—Å –≤—Å–µ –µ—â–µ –∂–∏–≤ü§¨üò≠ü§¨üò≠ü§¨\`\`\``)
                }
            })
        }
        //–ø–æ–≥–æ–¥–∞
        if (msg.content.search(`${prefix}[–ü–ø][–û–æOo][–ì–≥][[–û–æOo][–î–¥][–ê–∞Aa]`) > -1 && msg.author.bot === false) {
            request(url, function (err, response, body) {
                if (err) {
                    console.log('–æ—à–∏–±–∫–∞');
                } else {
                    let data = JSON.parse(body);
                    console.log(data);
                    let data2 = data.weather.find(item => item.id);
                    let temp = Math.floor(data.main.temp);
                    if (data2.description == '—è—Å–Ω–æ') {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÄÔ∏è${data2.description}‚òÄÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–æ–±–ª–∞')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚õÖ${data2.description}‚õÖ\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–¥–æ–∂–¥—å')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ üåßÔ∏è${data2.description}üåßÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–ø–∞—Å–º—É')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÅÔ∏è${data2.description}‚òÅÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                }
            });
        }

        console.log(msg.author.username + ' (' + msg.author.id + ') ' + ': ' + msg.content);
        async function execute(msg, serverQueue) {
            const args = msg.content.split(' ');

            const voiceChannel = msg.member.voice.channel;
            if (!voiceChannel) return msg.channel.send('–ß—Ç–æ–±—ã —è —Å–ø–µ–ª –¥–ª—è —Ç–µ–±—è, –∑–∞–π–¥–∏ –Ω–∞ –ª—é–±–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, ü§°');

            const songInfo = await ytdl.getInfo(args[1]);
            const song = {
                title: songInfo.title,
                url: songInfo.video_url,
            };

            if (serverQueue == undefined) {
                const queueContruct = {
                    textChannel: msg.channel,
                    voiceChannel: voiceChannel,
                    connection: null,
                    songs: [],
                    volume: 5,
                    playing: true
                };

                queue.set(msg.guild.id, queueContruct);
                queueContruct.songs.push(song);

                try {
                    let connection = await voiceChannel.join();
                    queueContruct.connection = connection;
                    play(msg.guild, queueContruct.songs[0]);
                } catch (err) {
                    console.log(err);
                    queue.delete(msg.guild.id);
                    return msg.channel.send(err);
                }
            } else {
                serverQueue.songs.push(song);
                console.log(serverQueue.songs);
                return msg.channel.send(`\`\`\`ü§ñ–î–æ–±–∞–≤–∏–ª üé§${song.title}üé§ –≤ –æ—á–µ—Ä–µ–¥—å ü§ñ\`\`\``);
            }

        }
        function play(guild, song) {
            let serverQueue = queue.get(guild.id);

            if (Object.keys(song).length == 0) {
                serverQueue.voice.channel.leave();
                queue.delete(guild.id);
            }
            serverQueue.dispatcher = serverQueue.connection.play(ytdl(song.url, { filter: "audioonly" }))
            serverQueue.dispatcher.on('speaking', (value) => {
                if (!value) {
                msg.channel.send('\`\`\`ü§ñ–ü–µ—Å–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—åü§ñ\`\`\`');
                serverQueue.songs.shift();
                play(guild, serverQueue.songs[0]);
                }
            })
            serverQueue.dispatcher.setVolumeLogarithmic(serverQueue.volume / 5);
        }

        function skip(msg, serverQueue) {
            if (!msg.member.voice.channel) {
                return msg.channel.send('\`\`\`–ê —è –∏ –Ω–µ –¥–ª—è —Ç–µ–±—è –ø–æ—é, ü§°\`\`\`');
            }
            if (Object.keys(serverQueue).length == 0) {
                return msg.channel.send('\`\`\`–í–∫–ª—é—á–∏ —Ö–æ—Ç—å –æ–¥–Ω—É –ø–µ—Å–Ω—é, ü§°\`\`\`');
            }
            serverQueue.dispatcher.pause();
        }

        function stop(msg, serverQueue) {
            if (!msg.member.voice.channel) {
                return msg.channel.send('\`\`\`–ê —è –∏ –Ω–µ –¥–ª—è —Ç–µ–±—è –ø–æ—é, ü§°\`\`\`')
            };
            serverQueue.songs = [];
            serverQueue.dispatcher.pause();
            msg.channel.send(`‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è–í–∞—à–∞ –ø–µ—Å–µ–Ω–∫–∞ —Å–ø–µ—Ç–∞‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è`);
        }
    }
});
bot.login(token);