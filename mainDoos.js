const Discord = require('discord.js');
const bot = new Discord.Client();
const request = require('request');
const config = require('./botconfig.json');
const token = config.token;
const prefix = config.prefix;
const apiKey = '9552deb6aed115532d3abdc34e24d985';
const city = 'volgograd';
const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=RU&appid=${apiKey}`;
const express = require("express");
const path = require('path');
const PORT = process.env.PORT || 5016;
let servers = {};
const ytdl = require('ytdl-core');

let http = require("http");
setInterval(function () {
    http.get("http://cyberdoos.herokuapp.com");
}, 300000);

express()
    .use(express.static(path.join(__dirname, 'public')))
    .set('views', path.join(__dirname, 'views'))
    .set('view engine', 'ejs')
    .get('/', (req, res) => res.render('pages/index'))
    .listen(PORT, () => console.log(`Listening on ${PORT}`))

//—Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
bot.on('ready', () => {
    console.log(`–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç ${bot.user.username}`);
    bot.generateInvite(["ADMINISTRATOR"]).then(link => {
    });
});

bot.on('message', async msg => {
    if ((msg.author.id !== '281120774289489922') || (msg.author.id !== '274610371417866242')) {
        //–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        let args = msg.content.substring(prefix.length).split(' ');
        switch (args[0]) {
            case 'play':

                function play(connection, message) {
                    let server = servers[msg.guild.id];

                    server.dispatcher = connection.play(ytdl(server.queue[0], { filter: 'audioonly' }));

                    server.queue.shift();

                    server.dispatcher.on('end', function () {
                        if (server.queue[0]) {
                            play(connection, msg);
                        } else {
                            connection.disconnect();
                        }
                    })
                }

                if (!args[1]) {
                    msg.channel.send(`\`\`\`–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é, ü§°\`\`\``);
                    return;
                }

                if (!msg.member.voice.channel) {
                    msg.channel.send(`\`\`\`–ß—Ç–æ–±—ã —è —Å–ø–µ–ª –¥–ª—è —Ç–µ–±—è, –∑–∞–π–¥–∏ –Ω–∞ –ª—é–±–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, ü§°\`\`\``);
                    return;
                }

                if (!servers[msg.guild.id]) servers[msg.guild.id] = {
                    queue: []
                }

                let server = servers[msg.guild.id];

                server.queue.push(args[1]);

                if (!msg.guild.voiceConnection) msg.member.voice.channel.join().then(function (connection) {
                    play(connection, msg);
                })

                break;

            case 'skip':
                let server2 = servers[msg.guild.id];
                if (server2.dispatcher) server2.dispatcher.end();
                msg.channel.send(`\`\`\`–í–∫–ª—é—á–∞—é —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Å–Ω—éüé§üé§üé§\`\`\``)
                break;

            case 'stop':
                let server3 = servers[msg.guild.id];
                console.log(server3)
                if (msg.member.voice.channel) {
                    for (let i = server3.queue.length - 1; i >= 0; i--) {
                        server3.queue.splice(i, 1);
                    }
                    server3.dispatcher.end();
                    msg.channel.send(`\`\`\`üíÄüíÄüíÄ–í–∞—à–∞ –ø–µ—Å–µ–Ω–∫–∞ —Å–ø–µ—Ç–∞üíÄüíÄüíÄ\`\`\``);
                }
                break;
        }
        //–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å
        if (msg.content.search(`${prefix}[–í–≤B][–ò–∏][–†—ÄPp][–£—ÉYy][Cc–°—Å]`) > -1 && msg.author.bot === false) {
            request("https://pomber.github.io/covid19/timeseries.json", function (err, response, body) {
                if (err) {
                    console.log('covid –æ—à–∏–±–∫–∞')
                } else {
                    let covidData = JSON.parse(body);
                    let lastday = covidData.Russia[covidData.Russia.length - 1];
                    msg.channel.send(`\`\`\`–ù–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –æ–∫—Ä—É–≥–µ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω üíä${lastday.confirmed}üíä —Å–ª—É—á–∞–µ–≤ –∑–∞—Ä–∞–∂–µ–Ω–∏—è COVID-19, –ø–æ–≥–∏–±–ª–æ üíÄ${lastday.deaths}üíÄ —á–µ–ª–æ–≤–µ–∫. –í–∞–Ω—É—Å –≤—Å–µ –µ—â–µ –∂–∏–≤ü§¨üò≠ü§¨üò≠ü§¨\`\`\``)
                }
            })
        }
        //–ø–æ–≥–æ–¥–∞
        if (msg.content.search(`${prefix}[–ü–ø][–û–æOo][–ì–≥][[–û–æOo][–î–¥][–ê–∞Aa]`) > -1 && msg.author.bot === false) {
            request(url, function (err, response, body) {
                if (err) {
                    console.log('–æ—à–∏–±–∫–∞');
                } else {
                    let data = JSON.parse(body);
                    console.log(data);
                    let data2 = data.weather.find(item => item.id);
                    let temp = Math.floor(data.main.temp);
                    if (data2.description == '—è—Å–Ω–æ') {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÄÔ∏è${data2.description}‚òÄÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–æ–±–ª–∞')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚õÖ${data2.description}‚õÖ\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–¥–æ–∂–¥—å')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ üåßÔ∏è${data2.description}üåßÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                    if (data2.description.includes('–ø–∞—Å–º—É')) {
                        msg.channel.send(`\`\`\`–°–µ–≥–æ–¥–Ω—è –≤ –£—Å—Ç—å-–ü–∞—Ä–∞—à–∏–Ω—Å–∫–µ ‚òÅÔ∏è${data2.description}‚òÅÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üî•${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüî•\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.\`\`\``);
                    }
                }
            });
        }
        console.log(msg.author.username + ' (' + msg.author.id + ') ' + ': ' + msg.content);
    };
    if ((msg.author.id === '281120774289489922' || msg.author.id ==='274610371417866242') && msg.content.startsWith(`${prefix}`)) {
        msg.reply('\`\`\`–¢—ã –∫—Ç–æ –Ω–∞—Ö—É–π —Ç–∞–∫–æ–π —à–æ–±—ã –º–Ω–µ –ø—Ä–∏–∫–∞–∑—ã–≤–∞—Ç—å????? –û—Ç—Å–æ—Å–∏ –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –∫–∞–º–Ω–µ–π –∏–∑ —Ä–∞—Å—Ç–∞, ü§°\`\`\`');
    }
});
bot.login(token);





