const Discord = require('discord.js');
const bot = new Discord.Client();
const request = require('request');
const config = require('./botconfig.json');
const token = config.token;
const prefix = config.prefix;
const express = require("express");
const path = require('path');
const PORT = process.env.PORT || 5016;
const queue = new Map();
let http = require("http");
setInterval(function () {
    http.get('http://cyberdoos.herokuapp.com');
}, 300000);

express()
    .use(express.static(path.join(__dirname, 'public')))
    .set('views', path.join(__dirname, 'views'))
    .set('view engine', 'ejs')
    .get('/', (req, res) => res.render('pages/index'))
    .listen(PORT, () => console.log(`Listening on ${PORT}`))

//—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±–æ—Ç–∞
bot.on('ready', () => {
    console.log(`–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –±–æ—Ç ${bot.user.username}`);
    bot.generateInvite(["ADMINISTRATOR"]).then(link => {
    });
    bot.user.setActivity('ü§ñ–∫–∏–±–µ—Ä–∂–∏–∑–Ω—åü§ñ')
});

bot.on('message', async msg => {
    //!help —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    if (msg.content.startsWith(`${prefix}help`)) {
        msg.reply({
            embed: {
                color: 15105570,
                description: `–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π: \n ${prefix}play (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞)‚ñ∂Ô∏è\n ${prefix}skip (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—á–µ—Ä–µ–¥—å)‚èπÔ∏è\n ${prefix}stop‚èØÔ∏è \n ${prefix}roll <—á–∏—Å–ª–æ> (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ <—á–∏—Å–ª–æ>)üíª\n ${prefix}flip (–ø–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É)üèµÔ∏è \n ${prefix}–ø–æ–≥–æ–¥–∞ (—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ(eng))üåû\n ${prefix}–≤–∏—Ä—É—Å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–±–æ–ª–µ–≤—à–∏—Ö –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§)üíä`
            }
        })
    }
    // —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    if (msg.content.startsWith(`${prefix}`)) {
        msg.delete({ timeout: 300000 });
    }
    if (msg.author.bot === true) {
        msg.delete({ timeout: 300000 });
    }
    //—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    if (msg.content.startsWith(`${prefix}roll`) && msg.author.bot === false) {
        const args = msg.content.split(' ');
        if (isNaN(args[1]) === false && Number(args[1]) >= 0) {
            function getRandomInRange(max) {
                return msg.reply({
                    embed: {
                        color: 15105570,
                        description: `–í–∞—à–µ —á–∏—Å–ª–æ ${Math.floor(Math.random() * (max + 1))}`
                    }
                });
            }
            getRandomInRange(Number(args[1]));
        } else {
            msg.reply({
                embed: {
                    color: 15105570,
                    description: `–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —á–∏—Å–ª–∞ –∏–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, ü§°`
                }
            })
        }
    }
    //–ø–æ–¥–±—Ä–æ—Å –º–æ–Ω–µ—Ç–∫–∏
    if (msg.content.startsWith(`${prefix}flip`)) {
        const coins = ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'];
        const flip = coins[Math.floor(Math.random() * 2)];
        if (flip === '–æ—Ä–µ–ª') {
            msg.reply({
                embed: {
                    color: 15105570,
                    description: `–í—ã–ø–∞–ª –æ—Ä—ë–ª`
                }
            });
        } else {
            msg.reply({
                embed: {
                    color: 15105570,
                    description: `–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞`
                }
            });
        }
    }
    //–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    const serverQueue = queue.get(msg.guild.id);

    if (msg.content.startsWith(`${prefix}play`)) {
        execute(msg, serverQueue);
        return;
    } else if (msg.content.startsWith(`${prefix}skip`)) {
        skip(msg, serverQueue);
        return;
    } else if (msg.content.startsWith(`${prefix}stop`)) {
        stop(msg, serverQueue);
        return;
    }
    //–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å
    if (msg.content.search(`${prefix}[–í–≤][–ò–∏][–†—Ä][–£—É][–°—Å]`) > -1 && msg.author.bot === false) {
        request("https://pomber.github.io/covid19/timeseries.json", function (err, response, body) {
            if (err) {
                msg.reply({
                    embed: {
                        color: 15105570,
                        description: `‚õî–£–≤—ã, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚õî`
                    }
                })
            } else {
                const covidData = JSON.parse(body);
                const lastday = covidData.Russia[covidData.Russia.length - 1];

                msg.reply({
                    embed: {
                        color: 15105570,
                        description: `–ù–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ üíä${lastday.confirmed}üíä —Å–ª—É—á–∞–µ–≤ –∑–∞—Ä–∞–∂–µ–Ω–∏—è COVID-19, –ø–æ–≥–∏–±–ª–æ üíÄ${lastday.deaths}üíÄ —á–µ–ª–æ–≤–µ–∫.`
                    }
                })
            }
        })
    }
    //–ø–æ–≥–æ–¥–∞
    if (msg.content.search(`${prefix}[–ü–ø][–û–æ][–ì–≥][–û–æ][–î–¥][–ê–∞]`) > -1 && msg.author.bot === false) {
        let weatherCountry = msg.content.split(' ');
        const apiKey = '9552deb6aed115532d3abdc34e24d985';
        weatherCountry.shift();
        let weatherCountryWithoutCommand = weatherCountry.join(' ');

        if (weatherCountryWithoutCommand.search(`[–í–≤][–õ–ª][–ì–≥]`) > -1 || weatherCountryWithoutCommand.search(`[–í–≤][–û–æ][–õ–ª][–ì–≥][–û–æ][–ì–≥][–†—Ä][–ê–∞][–î–¥]`) > -1) {
            weatherCountryWithoutCommand = 'volgograd';
        };
        if (weatherCountryWithoutCommand.search(`[–£—É][–õ–ª]`) > -1) {
            weatherCountryWithoutCommand = 'Ust-Labinsk';
        };
        if (weatherCountryWithoutCommand.search(`[–°—Å][–ü–ø][–ë–±]`) > -1 || weatherCountryWithoutCommand.search(`[–ü–ø][–ò–∏][–¢—Ç][–ï–µ][–†—Ä]`) > -1) {
            weatherCountryWithoutCommand = 'Saint Petersburg'
        };
        if (weatherCountryWithoutCommand.search(`[–ú–º][–°—Å][–ö–∫]`) > -1 || weatherCountryWithoutCommand.search(`[–ú–º][–û–æ][–°—Å][–ö–∫][–í–≤][–ê–∞]`) > -1) {
            weatherCountryWithoutCommand = 'Moscow'
        };
        const url = `http://api.openweathermap.org/data/2.5/weather?q=${weatherCountryWithoutCommand}&units=metric&lang=RU&appid=${apiKey}`;
        request(url, function (err, response, body) {
            let data = JSON.parse(body);
            if (data.message === 'city not found') {
                msg.channel.send({
                    embed: {
                        color: 15105570,
                        description: `‚ùåüèôÔ∏è –í –º–æ–∏—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç ‚ùåüèôÔ∏è`
                    }
                })
            } else {
                let data2 = data.weather.find(item => item.id);
                let temp = Math.floor(data.main.temp);
                if (data2.description == '—è—Å–Ω–æ') {
                    msg.channel.send({
                        embed: {
                            color: 15105570,
                            description: `${data.name}. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç. ‚òÄÔ∏è${data2.description}‚òÄÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üåà${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüåà\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.`
                        }
                    })
                }
                if (data2.description.includes('–æ–±–ª–∞')) {
                    msg.channel.send({
                        embed: {
                            color: 15105570,
                            description: `${data.name}. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç. ‚õÖ${data2.description}‚õÖ\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üåà${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüåà\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.`
                        }
                    })
                }
                if (data2.description.includes('–¥–æ–∂–¥')) {
                    msg.channel.send({
                        embed: {
                            color: 15105570,
                            description: `${data.name}. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç. üåßÔ∏è${data2.description}üåßÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üåà${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüåà\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.`
                        }
                    })
                }
                if (data2.description.includes('–ø–∞—Å–º—É')) {
                    msg.channel.send({
                        embed: {
                            color: 15105570,
                            description: `${data.name}. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç. ‚òÅÔ∏è${data2.description}‚òÅÔ∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üåà${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüåà\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.`
                        }
                    })
                }
                if (data2.description.includes('—Ç—É–º–∞–Ω')) {
                    msg.channel.send({
                        embed: {
                            color: 15105570,
                            description: `${data.name}. –ü–æ–≥–æ–¥–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç. üå´Ô∏è${data2.description}üå´Ô∏è\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç üåà${temp} –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—èüåà\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ üí®${data.wind.speed} –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—Éüí®.`
                        }
                    })
                }
            }
        });
    };

bot.login(token);